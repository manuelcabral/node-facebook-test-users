// Generated by CoffeeScript 1.6.2
(function() {
  var FacebookTestUsers, qs, request,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  qs = require('querystring');

  request = require('request');

  FacebookTestUsers = (function() {
    function FacebookTestUsers(app_id, app_secret) {
      this.app_id = app_id;
      this.app_secret = app_secret;
      this["delete"] = __bind(this["delete"], this);
    }

    FacebookTestUsers.prototype.getAppToken = function(callback) {
      if (this.app_token) {
        return callback(null, this.app_token);
      } else {
        return this.fetchAppToken(callback);
      }
    };

    FacebookTestUsers.prototype.fetchAppToken = function(callback) {
      var app_login,
        _this = this;

      app_login = {
        url: 'https://graph.facebook.com/oauth/access_token',
        qs: {
          redirect_uri: "http://localhost",
          client_id: this.app_id,
          client_secret: this.app_secret,
          grant_type: "client_credentials"
        }
      };
      return request.get(app_login, function(e, r, body) {
        if (!e && r.statusCode === 200) {
          _this.app_token = qs.parse(body).access_token;
          return callback(null, _this.app_token);
        } else {
          return callback(e || body, null);
        }
      });
    };

    FacebookTestUsers.prototype.create = function(callback) {
      var _this = this;

      return this.getAppToken(function(e, app_token) {
        var create_query;

        create_query = {
          url: "https://graph.facebook.com/" + _this.app_id + "/accounts/test-users?",
          qs: {
            permissions: "read_stream",
            access_token: app_token
          },
          json: true
        };
        return request.post(create_query, function(e, r, body) {
          if (!e && r.statusCode === 200) {
            return callback(null, body);
          } else {
            return callback(e || body, null);
          }
        });
      });
    };

    FacebookTestUsers.prototype.validateUserToken = function(user_token, callback) {
      var validate_query;

      validate_query = {
        url: "https://graph.facebook.com/app/?",
        qs: {
          access_token: user_token
        },
        json: true
      };
      return request.get(validate_query, function(e, r, body) {
        if (!e && r.statusCode === 200) {
          return callback(null, body);
        } else {
          return callback(e || body, null);
        }
      });
    };

    FacebookTestUsers.prototype["delete"] = function(user_id, callback) {
      var _this = this;

      return this.getAppToken(function(e, app_token) {
        var delete_query;

        delete_query = {
          url: "https://graph.facebook.com/" + user_id + "?",
          qs: {
            access_token: app_token
          },
          json: true
        };
        return request.del(delete_query, function(e, r, body) {
          if (!e && r.statusCode === 200) {
            return callback(null, body);
          } else {
            return callback(e || body, null);
          }
        });
      });
    };

    FacebookTestUsers.prototype.fetch = function(callback) {
      var _this = this;

      return this.getAppToken(function(e, app_token) {
        var access_query;

        access_query = {
          url: "https://graph.facebook.com/" + _this.app_id + "/accounts/test-users?",
          qs: {
            access_token: app_token
          },
          json: true
        };
        return request.get(access_query, function(e, r, body) {
          if (!e && r.statusCode === 200) {
            return callback(null, body.data);
          } else {
            return callback(e || body, null);
          }
        });
      });
    };

    return FacebookTestUsers;

  })();

  module.exports = FacebookTestUsers;

}).call(this);
